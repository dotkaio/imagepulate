"""
This type stub file was generated by pyright.
"""

import torch
from typing import Optional, Tuple
from torch import nn

class PositionEmbeddingSine(nn.Module):
    """
    This is a more standard version of the position embedding, very similar to the one
    used by the Attention Is All You Need paper, generalized to work on images.
    """
    def __init__(self, num_pos_feats, temperature: int = ..., normalize: bool = ..., scale: Optional[float] = ...) -> None:
        ...
    
    @torch.no_grad()
    def encode_boxes(self, x, y, w, h): # -> Tensor:
        ...
    
    encode = ...
    @torch.no_grad()
    def encode_points(self, x, y, labels): # -> Tensor:
        ...
    
    @torch.no_grad()
    def forward(self, x: torch.Tensor): # -> Tensor:
        ...
    


class PositionEmbeddingRandom(nn.Module):
    """
    Positional encoding using random spatial frequencies.
    """
    def __init__(self, num_pos_feats: int = ..., scale: Optional[float] = ...) -> None:
        ...
    
    def forward(self, size: Tuple[int, int]) -> torch.Tensor:
        """Generate positional encoding for a grid of the specified size."""
        ...
    
    def forward_with_coords(self, coords_input: torch.Tensor, image_size: Tuple[int, int]) -> torch.Tensor:
        """Positionally encode points that are not normalized to [0,1]."""
        ...
    


def init_t_xy(end_x: int, end_y: int): # -> tuple[Tensor, Tensor]:
    ...

def compute_axial_cis(dim: int, end_x: int, end_y: int, theta: float = ...): # -> Tensor:
    ...

def reshape_for_broadcast(freqs_cis: torch.Tensor, x: torch.Tensor): # -> Tensor:
    ...

def apply_rotary_enc(xq: torch.Tensor, xk: torch.Tensor, freqs_cis: torch.Tensor, repeat_freqs_k: bool = ...): # -> tuple[Tensor, Tensor]:
    ...

