"""
This type stub file was generated by pyright.
"""

import torch

NO_OBJ_SCORE = ...
class SAM2Base(torch.nn.Module):
    def __init__(self, image_encoder, memory_attention, memory_encoder, num_maskmem=..., image_size=..., backbone_stride=..., sigmoid_scale_for_mem_enc=..., sigmoid_bias_for_mem_enc=..., binarize_mask_from_pts_for_mem_enc=..., use_mask_input_as_output_without_sam=..., max_cond_frames_in_attn=..., directly_add_no_mem_embed=..., use_high_res_features_in_sam=..., multimask_output_in_sam=..., multimask_min_pt_num=..., multimask_max_pt_num=..., multimask_output_for_tracking=..., use_multimask_token_for_obj_ptr: bool = ..., iou_prediction_use_sigmoid=..., memory_temporal_stride_for_eval=..., non_overlap_masks_for_mem_enc=..., use_obj_ptrs_in_encoder=..., max_obj_ptrs_in_encoder=..., add_tpos_enc_to_obj_ptrs=..., proj_tpos_enc_in_obj_ptrs=..., use_signed_tpos_enc_to_obj_ptrs=..., only_obj_ptrs_in_the_past_for_eval=..., pred_obj_scores: bool = ..., pred_obj_scores_mlp: bool = ..., fixed_no_obj_ptr: bool = ..., soft_no_obj_ptr: bool = ..., use_mlp_for_obj_ptr_proj: bool = ..., no_obj_embed_spatial: bool = ..., sam_mask_decoder_extra_args=..., compile_image_encoder: bool = ...) -> None:
        ...
    
    @property
    def device(self): # -> device:
        ...
    
    def forward(self, *args, **kwargs):
        ...
    
    def forward_image(self, img_batch: torch.Tensor):
        """Get the image feature on the input batch."""
        ...
    
    def track_step(self, frame_idx, is_init_cond_frame, current_vision_feats, current_vision_pos_embeds, feat_sizes, point_inputs, mask_inputs, output_dict, num_frames, track_in_reverse=..., run_mem_encoder=..., prev_sam_mask_logits=...): # -> dict[str, Any]:
        ...
    


